'use strict';

var React = require('react');
var moment = require('moment');
require('moment-duration-format');

var dateShape = React.PropTypes.oneOfType([React.PropTypes.number, React.PropTypes.string, React.PropTypes.instanceOf(Date)]);

/**
 * Render an updated relative date or with a specific format.
 *
 * Relative date: <Date date={new Date(...)} />
 * With format: <Date date={new Date(...)} format="%Y %M" />
 */
var DateSpan = React.createClass({
    displayName: 'DateSpan',


    contextTypes: {
        now: dateShape
    },

    getDefaultProps: function getDefaultProps() {
        return {
            format: '',
            refresh: 10 * 1000,
            utc: true
        };
    },
    getInitialState: function getInitialState() {
        return {
            now: 0
        };
    },
    tick: function tick() {
        this.setState({
            now: Date.now()
        });
    },
    componentDidMount: function componentDidMount() {
        var _props = this.props;
        var refresh = _props.refresh;
        var format = _props.format;

        // We tick only once to update date from utc to local

        if (format) {
            setTimeout(this.tick, 1000);
            return;
        }

        this.interval = setInterval(this.tick, refresh);
    },
    componentWillUnmount: function componentWillUnmount() {
        if (!this.interval) {
            return;
        }

        clearInterval(this.interval);
    },
    render: function render() {
        var now = this.state.now || this.context.now;
        var _props2 = this.props;
        var date = _props2.date;
        var format = _props2.format;
        var utc = _props2.utc;

        var displayDate = void 0;

        // Parse the date
        if (utc) {
            date = moment.utc(date);
        } else {
            date = moment(date);
        }

        // Apply formating if provided
        if (format) {
            // If client-side, we use the real date
            if (this.state.now) {
                date = date.local();
            }

            displayDate = date.format(format);
        } else {
            displayDate = date.from(now);
        }

        return React.createElement(
            'span',
            null,
            displayDate
        );
    }
});

/**
 * Render an updated duration.
 *
 * <Date.Duration duration={6000} />
 */
var DateDuration = React.createClass({
    displayName: 'DateDuration',
    getDefaultProps: function getDefaultProps() {
        return {
            format: 'h [hrs], m [min], s [sec]',
            refresh: 1000
        };
    },
    getInitialState: function getInitialState() {
        return {
            elapsed: 0
        };
    },
    tick: function tick() {
        var elapsed = this.state.elapsed;
        var refresh = this.props.refresh;


        this.setState({
            elapsed: elapsed + refresh
        });
    },
    componentDidMount: function componentDidMount() {
        var refresh = this.props.refresh;

        if (refresh > 0) {
            this.interval = setInterval(this.tick, refresh);
        }
    },
    componentWillUnmount: function componentWillUnmount() {
        clearInterval(this.interval);
    },
    render: function render() {
        var _props3 = this.props;
        var duration = _props3.duration;
        var format = _props3.format;
        var elapsed = this.state.elapsed;


        duration = duration + elapsed;

        return React.createElement(
            'span',
            null,
            moment.duration(duration).format(format)
        );
    }
});

var DateContext = React.createClass({
    displayName: 'DateContext',


    childContextTypes: {
        now: dateShape
    },

    getChildContext: function getChildContext() {
        return {
            now: this.props.now
        };
    },
    render: function render() {
        return React.Children.only(this.props.children);
    }
});

module.exports = DateSpan;
module.exports.shape = dateShape;
module.exports.Context = DateContext;
module.exports.Duration = DateDuration;
//# sourceMappingURL=data:application/json;base64,