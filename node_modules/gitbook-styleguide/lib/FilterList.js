'use strict';

var React = require('react');
var classNames = require('classnames');

var FilterItem = React.createClass({
    displayName: 'FilterItem',
    getDefaultProps: function getDefaultProps() {
        return {
            selected: false,
            href: '#'
        };
    },
    onClick: function onClick(e) {
        if (!this.props.onClick) {
            return;
        }

        e.preventDefault();
        this.props.onClick();
    },
    render: function render() {
        var className = classNames('filter-item', this.props.className, {
            selected: this.props.selected
        });
        var count = this.props.count;
        var href = this.props.href;
        var inner = '';

        if (typeof count !== 'undefined') {
            inner = React.createElement(
                'span',
                { className: 'count' },
                count
            );
        }

        return React.createElement(
            'li',
            null,
            React.createElement(
                'a',
                { className: className, href: href, onClick: this.onClick },
                inner,
                this.props.children
            )
        );
    }
});

var FilterList = React.createClass({
    displayName: 'FilterList',
    render: function render() {
        return React.createElement(
            'ul',
            { className: 'filter-list' },
            this.props.children
        );
    }
});

module.exports = FilterList;
module.exports.Item = FilterItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9GaWx0ZXJMaXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxRQUFRLFFBQVEsT0FBUixDQUFkO0FBQ0EsSUFBTSxhQUFhLFFBQVEsWUFBUixDQUFuQjs7QUFFQSxJQUFNLGFBQWEsTUFBTSxXQUFOLENBQWtCO0FBQUE7QUFVakMsbUJBVmlDLDZCQVVmO0FBQ2QsZUFBTztBQUNILHNCQUFVLEtBRFA7QUFFSCxrQkFBUTtBQUZMLFNBQVA7QUFJSCxLQWZnQztBQWlCakMsV0FqQmlDLG1CQWlCekIsQ0FqQnlCLEVBaUJ0QjtBQUNQLFlBQUksQ0FBQyxLQUFLLEtBQUwsQ0FBVyxPQUFoQixFQUF5QjtBQUNyQjtBQUNIOztBQUVELFVBQUUsY0FBRjtBQUNBLGFBQUssS0FBTCxDQUFXLE9BQVg7QUFDSCxLQXhCZ0M7QUEwQmpDLFVBMUJpQyxvQkEwQnhCO0FBQ0wsWUFBTSxZQUFZLFdBQVcsYUFBWCxFQUEwQixLQUFLLEtBQUwsQ0FBVyxTQUFyQyxFQUFnRDtBQUM5RCxzQkFBVSxLQUFLLEtBQUwsQ0FBVztBQUR5QyxTQUFoRCxDQUFsQjtBQUdBLFlBQU0sUUFBUSxLQUFLLEtBQUwsQ0FBVyxLQUF6QjtBQUNBLFlBQU0sT0FBUSxLQUFLLEtBQUwsQ0FBVyxJQUF6QjtBQUNBLFlBQUksUUFBUSxFQUFaOztBQUVBLFlBQUksT0FBTyxLQUFQLEtBQWlCLFdBQXJCLEVBQWtDO0FBQzlCLG9CQUFRO0FBQUE7QUFBQSxrQkFBTSxXQUFVLE9BQWhCO0FBQXlCO0FBQXpCLGFBQVI7QUFDSDs7QUFFRCxlQUNJO0FBQUE7QUFBQTtBQUNJO0FBQUE7QUFBQSxrQkFBRyxXQUFXLFNBQWQsRUFBeUIsTUFBTSxJQUEvQixFQUFxQyxTQUFTLEtBQUssT0FBbkQ7QUFDSyxxQkFETDtBQUVLLHFCQUFLLEtBQUwsQ0FBVztBQUZoQjtBQURKLFNBREo7QUFRSDtBQTlDZ0MsQ0FBbEIsQ0FBbkI7O0FBaURBLElBQU0sYUFBYSxNQUFNLFdBQU4sQ0FBa0I7QUFBQTtBQUtqQyxVQUxpQyxvQkFLeEI7QUFDTCxlQUNJO0FBQUE7QUFBQSxjQUFJLFdBQVUsYUFBZDtBQUNLLGlCQUFLLEtBQUwsQ0FBVztBQURoQixTQURKO0FBS0g7QUFYZ0MsQ0FBbEIsQ0FBbkI7O0FBY0EsT0FBTyxPQUFQLEdBQWlCLFVBQWpCO0FBQ0EsT0FBTyxPQUFQLENBQWUsSUFBZixHQUFzQixVQUF0QiIsImZpbGUiOiJGaWx0ZXJMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgY2xhc3NOYW1lcyA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxuY29uc3QgRmlsdGVySXRlbSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgY2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlLFxuICAgICAgICBzZWxlY3RlZDogIFJlYWN0LlByb3BUeXBlcy5ib29sLFxuICAgICAgICBocmVmOiAgICAgIFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGNsYXNzTmFtZTogUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgY291bnQ6ICAgICBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyLFxuICAgICAgICBvbkNsaWNrOiAgIFJlYWN0LlByb3BUeXBlcy5mdW5jXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNlbGVjdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGhyZWY6ICAgJyMnXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIG9uQ2xpY2soZSkge1xuICAgICAgICBpZiAoIXRoaXMucHJvcHMub25DbGljaykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLnByb3BzLm9uQ2xpY2soKTtcbiAgICB9LFxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzKCdmaWx0ZXItaXRlbScsIHRoaXMucHJvcHMuY2xhc3NOYW1lLCB7XG4gICAgICAgICAgICBzZWxlY3RlZDogdGhpcy5wcm9wcy5zZWxlY3RlZFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLnByb3BzLmNvdW50O1xuICAgICAgICBjb25zdCBocmVmICA9IHRoaXMucHJvcHMuaHJlZjtcbiAgICAgICAgbGV0IGlubmVyID0gJyc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb3VudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlubmVyID0gPHNwYW4gY2xhc3NOYW1lPVwiY291bnRcIj57Y291bnR9PC9zcGFuPjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPXtjbGFzc05hbWV9IGhyZWY9e2hyZWZ9IG9uQ2xpY2s9e3RoaXMub25DbGlja30+XG4gICAgICAgICAgICAgICAgICAgIHtpbm5lcn1cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgKTtcbiAgICB9XG59KTtcblxuY29uc3QgRmlsdGVyTGlzdCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgY2hpbGRyZW46IFJlYWN0LlByb3BUeXBlcy5ub2RlXG4gICAgfSxcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDx1bCBjbGFzc05hbWU9XCJmaWx0ZXItbGlzdFwiPlxuICAgICAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgKTtcbiAgICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBGaWx0ZXJMaXN0O1xubW9kdWxlLmV4cG9ydHMuSXRlbSA9IEZpbHRlckl0ZW07XG4iXX0=