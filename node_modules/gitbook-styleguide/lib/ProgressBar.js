'use strict';

var React = require('react');
var bool = React.PropTypes.bool;

/**
 * Displays a progress bar (YouTube-like) at the top of container
 * Based on https://github.com/lonelyclick/react-loading-bar/blob/master/src/Loading.jsx
 */

var ProgressBar = React.createClass({
    displayName: 'ProgressBar',
    getDefaultProps: function getDefaultProps() {
        return {
            show: false
        };
    },
    getInitialState: function getInitialState() {
        return {
            size: 0,
            disappearDelayHide: false, // when dispappear, first transition then display none
            percent: 0,
            appearDelayWidth: 0 // when appear, first display block then transition width
        };
    },
    componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
        var show = nextProps.show;


        if (show) {
            this.show();
        } else {
            this.hide();
        }
    },
    shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
        return true; // !shallowEqual(nextState, this.state)
    },
    show: function show() {
        var _this = this;

        var _state = this.state;
        var size = _state.size;
        var percent = _state.percent;


        var appearDelayWidth = size === 0;
        percent = calculatePercent(percent);

        this.setState({
            size: ++size,
            appearDelayWidth: appearDelayWidth,
            percent: percent
        });

        if (appearDelayWidth) {
            setTimeout(function () {
                _this.setState({
                    appearDelayWidth: false
                });
            });
        }
    },
    hide: function hide() {
        var _this2 = this;

        var size = this.state.size;


        if (--size < 0) {
            this.setState({ size: 0 });
            return;
        }

        this.setState({
            size: 0,
            disappearDelayHide: true,
            percent: 1
        });

        setTimeout(function () {
            _this2.setState({
                disappearDelayHide: false,
                percent: 0
            });
        }, 500);
    },
    getBarStyle: function getBarStyle() {
        var _state2 = this.state;
        var disappearDelayHide = _state2.disappearDelayHide;
        var appearDelayWidth = _state2.appearDelayWidth;
        var percent = _state2.percent;


        return {
            width: appearDelayWidth ? 0 : percent * 100 + '%',
            display: disappearDelayHide || percent > 0 ? 'block' : 'none'
        };
    },
    getShadowStyle: function getShadowStyle() {
        var _state3 = this.state;
        var percent = _state3.percent;
        var disappearDelayHide = _state3.disappearDelayHide;


        return {
            display: disappearDelayHide || percent > 0 ? 'block' : 'none'
        };
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: 'progress-bar' },
            React.createElement(
                'div',
                { className: 'bar', style: this.getBarStyle() },
                React.createElement('div', { className: 'progress-bar-shadow',
                    style: this.getShadowStyle() })
            )
        );
    }
});

function calculatePercent(percent) {
    percent = percent || 0;

    // How much of remaining bar we advance
    var progress = 0.1 + Math.random() * 0.3;

    return percent + progress * (1 - percent);
}

module.exports = ProgressBar;
//# sourceMappingURL=data:application/json;base64,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QUEsa0JBQUssV0FBVSxLQUFmLEVBQXFCLE9BQU8sS0FBSyxXQUFMLEVBQTVCO0FBQ0ksNkNBQUssV0FBVSxxQkFBZjtBQUNLLDJCQUFPLEtBQUssY0FBTCxFQURaO0FBREo7QUFERyxTQUFQO0FBT0g7QUF0R2lDLENBQWxCLENBQXBCOztBQXlHQSxTQUFTLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DO0FBQy9CLGNBQVUsV0FBVyxDQUFyQjs7QUFFQTtBQUNBLFFBQU0sV0FBVyxNQUFNLEtBQUssTUFBTCxLQUFnQixHQUF2Qzs7QUFFQSxXQUFPLFVBQVcsWUFBWSxJQUFJLE9BQWhCLENBQWxCO0FBQ0g7O0FBRUQsT0FBTyxPQUFQLEdBQWlCLFdBQWpCIiwiZmlsZSI6IlByb2dyZXNzQmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgeyBib29sIH0gPSBSZWFjdC5Qcm9wVHlwZXM7XG5cbi8qKlxuICogRGlzcGxheXMgYSBwcm9ncmVzcyBiYXIgKFlvdVR1YmUtbGlrZSkgYXQgdGhlIHRvcCBvZiBjb250YWluZXJcbiAqIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9sb25lbHljbGljay9yZWFjdC1sb2FkaW5nLWJhci9ibG9iL21hc3Rlci9zcmMvTG9hZGluZy5qc3hcbiAqL1xuY29uc3QgUHJvZ3Jlc3NCYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIHNob3c6ICBib29sXG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wcyAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBnZXRJbml0aWFsU3RhdGUgKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2l6ZTogMCxcbiAgICAgICAgICAgIGRpc2FwcGVhckRlbGF5SGlkZTogZmFsc2UsIC8vIHdoZW4gZGlzcGFwcGVhciwgZmlyc3QgdHJhbnNpdGlvbiB0aGVuIGRpc3BsYXkgbm9uZVxuICAgICAgICAgICAgcGVyY2VudDogMCxcbiAgICAgICAgICAgIGFwcGVhckRlbGF5V2lkdGg6IDAgLy8gd2hlbiBhcHBlYXIsIGZpcnN0IGRpc3BsYXkgYmxvY2sgdGhlbiB0cmFuc2l0aW9uIHdpZHRoXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wcykge1xuICAgICAgICBjb25zdCB7IHNob3cgfSA9IG5leHRQcm9wcztcblxuICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGUgKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIHJldHVybiB0cnVlOyAvLyAhc2hhbGxvd0VxdWFsKG5leHRTdGF0ZSwgdGhpcy5zdGF0ZSlcbiAgICB9LFxuXG4gICAgc2hvdyAoKSB7XG4gICAgICAgIGxldCB7IHNpemUsIHBlcmNlbnQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgY29uc3QgYXBwZWFyRGVsYXlXaWR0aCA9IHNpemUgPT09IDA7XG4gICAgICAgIHBlcmNlbnQgPSBjYWxjdWxhdGVQZXJjZW50KHBlcmNlbnQpO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgc2l6ZTogKytzaXplLFxuICAgICAgICAgICAgYXBwZWFyRGVsYXlXaWR0aCxcbiAgICAgICAgICAgIHBlcmNlbnRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGFwcGVhckRlbGF5V2lkdGgpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBhcHBlYXJEZWxheVdpZHRoOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaGlkZSAoKSB7XG4gICAgICAgIGxldCB7IHNpemUgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgaWYgKC0tc2l6ZSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzaXplOiAwIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzaXplOiAwLFxuICAgICAgICAgICAgZGlzYXBwZWFyRGVsYXlIaWRlOiB0cnVlLFxuICAgICAgICAgICAgcGVyY2VudDogMVxuICAgICAgICB9KTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIGRpc2FwcGVhckRlbGF5SGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgcGVyY2VudDogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIDUwMCk7XG4gICAgfSxcblxuICAgIGdldEJhclN0eWxlICgpIHtcbiAgICAgICAgY29uc3QgeyBkaXNhcHBlYXJEZWxheUhpZGUsIGFwcGVhckRlbGF5V2lkdGgsIHBlcmNlbnQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiBhcHBlYXJEZWxheVdpZHRoID8gMCA6IHBlcmNlbnQgKiAxMDAgKyAnJScsXG4gICAgICAgICAgICBkaXNwbGF5OiBkaXNhcHBlYXJEZWxheUhpZGUgfHwgcGVyY2VudCA+IDAgPyAnYmxvY2snOiAnbm9uZSdcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0U2hhZG93U3R5bGUgKCkge1xuICAgICAgICBjb25zdCB7IHBlcmNlbnQsIGRpc2FwcGVhckRlbGF5SGlkZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlzcGxheTogZGlzYXBwZWFyRGVsYXlIaWRlIHx8IHBlcmNlbnQgPiAwID8gJ2Jsb2NrJzogJ25vbmUnXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIHJlbmRlciAoKSB7XG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInByb2dyZXNzLWJhclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJiYXJcIiBzdHlsZT17dGhpcy5nZXRCYXJTdHlsZSgpfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2dyZXNzLWJhci1zaGFkb3dcIlxuICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3RoaXMuZ2V0U2hhZG93U3R5bGUoKX0+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+O1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVQZXJjZW50KHBlcmNlbnQpIHtcbiAgICBwZXJjZW50ID0gcGVyY2VudCB8fCAwO1xuXG4gICAgLy8gSG93IG11Y2ggb2YgcmVtYWluaW5nIGJhciB3ZSBhZHZhbmNlXG4gICAgY29uc3QgcHJvZ3Jlc3MgPSAwLjEgKyBNYXRoLnJhbmRvbSgpICogMC4zO1xuXG4gICAgcmV0dXJuIHBlcmNlbnQgKyAgcHJvZ3Jlc3MgKiAoMSAtIHBlcmNlbnQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb2dyZXNzQmFyO1xuIl19