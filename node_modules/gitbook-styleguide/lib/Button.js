'use strict';

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var classNames = require('classnames');

var Icon = require('./Icon');
var STYLES = require('./STYLES');
var SIZES = require('./SIZES');

var BUTTONS_STYLES = STYLES.concat(['link', 'text-link', 'text-danger', 'text-success', 'text-warning', 'count']);

var Button = React.createClass({
    displayName: 'Button',
    getDefaultProps: function getDefaultProps() {
        return {
            style: 'default',
            size: 'md',
            type: 'button',
            filled: false,
            disabled: false,
            active: false
        };
    },
    onClick: function onClick(e) {
        if (this.props.onClick) {
            this.props.onClick();
        }
    },
    render: function render() {
        var _props = this.props;
        var title = _props.title;
        var icon = _props.icon;
        var filled = _props.filled;
        var block = _props.block;
        var noBorder = _props.noBorder;
        var active = _props.active;
        var dropdownToggle = _props.dropdownToggle;
        var style = _props.style;
        var size = _props.size;
        var className = _props.className;
        var children = _props.children;
        var onNativeClick = _props.onNativeClick;
        var onClick = _props.onClick;

        var props = _objectWithoutProperties(_props, ['title', 'icon', 'filled', 'block', 'noBorder', 'active', 'dropdownToggle', 'style', 'size', 'className', 'children', 'onNativeClick', 'onClick']);

        var inner = icon ? React.createElement(Icon, { className: icon }) : '';

        props.className = classNames('btn', 'btn-' + style, 'btn-' + size, className, {
            'btn-fill': filled,
            'btn-block': block,
            'btn-noborder': noBorder,
            active: active,
            'dropdown-toggle': dropdownToggle,
            'tooltipped': Boolean(title)
        });
        props['aria-label'] = title;
        props.role = 'button';
        props.onClick = onNativeClick ? onNativeClick : onClick;

        if (props.href) {
            delete props.type;
            return React.createElement(
                'a',
                props,
                inner,
                ' ',
                children
            );
        } else {
            return React.createElement(
                'button',
                props,
                inner,
                ' ',
                children
            );
        }
    }
});

var ButtonGroup = React.createClass({
    displayName: 'ButtonGroup',
    render: function render() {
        var _props2 = this.props;
        var className = _props2.className;
        var pull = _props2.pull;
        var children = _props2.children;
        var block = _props2.block;


        className = classNames('btn-group', className, pull ? 'pull-' + pull : '', {
            'btn-group-block': block
        });

        return React.createElement(
            'div',
            { className: className },
            children
        );
    }
});

var ButtonToolbar = React.createClass({
    displayName: 'ButtonToolbar',
    render: function render() {
        return React.createElement(
            'div',
            { className: 'btn-toolbar ' + (this.props.className || '') },
            this.props.children
        );
    }
});

var ButtonCaret = React.createClass({
    displayName: 'ButtonCaret',
    render: function render() {
        return React.createElement('span', { className: 'caret' });
    }
});

module.exports = Button;
module.exports.Group = ButtonGroup;
module.exports.Toolbar = ButtonToolbar;
module.exports.Caret = ButtonCaret;
module.exports.STYLES = BUTTONS_STYLES;
//# sourceMappingURL=data:application/json;base64,