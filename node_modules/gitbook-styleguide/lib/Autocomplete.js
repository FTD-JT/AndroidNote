'use strict';

var React = require('react');
var classNames = require('classnames');

var Input = require('./Input');
var Spinner = require('./Spinner');

var KEYCODE_ENTER = 13;
var KEYCODE_UP = 38;
var KEYCODE_DOWN = 40;

var Autocomplete = React.createClass({
    displayName: 'Autocomplete',
    getInitialState: function getInitialState() {
        return {
            value: this.props.value || '',
            cursor: null,
            loading: false,
            focused: false,
            results: []
        };
    },


    /**
     * Typed value changed, we fetch the new autocomplete result
     */
    onInputChanged: function onInputChanged(e) {
        var that = this;
        var onFetch = this.props.onFetch;
        var value = e.target.value;

        this.setState({
            value: value,
            loading: true
        });

        onFetch(value, function (results) {
            that.setState({
                loading: false,
                results: results
            });
        });
    },


    /**
     * User is focusing/blur the input
     */
    onFocusChanged: function onFocusChanged(isFocused) {
        this.setState({
            focused: isFocused
        });
    },


    /**
     * Submit value at cursor
     */
    onEnter: function onEnter() {
        var _state = this.state;
        var cursor = _state.cursor;
        var value = _state.value;
        var onEnter = this.props.onEnter;

        if (cursor >= 0) {
            this.onSelect(cursor);
        } else if (onEnter) {
            onEnter(value);
            this.setState({
                focused: false,
                cursor: null,
                results: [],
                value: ''
            });
        }
    },


    /**
     * Submit a value
     */
    onSelect: function onSelect(index) {
        var _state2 = this.state;
        var value = _state2.value;
        var results = _state2.results;

        var selected = results[index];

        this.setState({
            cursor: null,
            results: [],
            value: ''
        });

        this.props.onChange(value, selected);
    },


    /**
     * User pressed a key in text input
     */
    onKeyDown: function onKeyDown(e) {
        var _state3 = this.state;
        var cursor = _state3.cursor;
        var results = _state3.results;


        if (e.keyCode === KEYCODE_ENTER) {
            e.preventDefault();
            this.onEnter();
        } else if (e.keyCode === KEYCODE_DOWN) {
            e.preventDefault();
            cursor++;
        } else if (e.keyCode === KEYCODE_UP) {
            e.preventDefault();
            cursor--;
        }

        if (cursor >= results.length) {
            cursor = results.length - 1;
        }
        if (cursor < -1) {
            cursor = -1;
        }

        this.setState({
            cursor: cursor
        });
    },


    /**
     * Render the suggestions
     */
    renderResults: function renderResults() {
        var that = this;
        var _state4 = this.state;
        var results = _state4.results;
        var value = _state4.value;
        var cursor = _state4.cursor;

        var ResultComponent = this.props.renderResult;

        return React.createElement(
            'div',
            { className: 'AutocompleteResults' },
            results.map(function (result, i) {
                var isActive = i === cursor;

                return React.createElement(
                    AutocompleteResult,
                    { key: value + '-' + i, active: isActive,
                        onClick: function onClick(e) {
                            return that.onSelect(i);
                        } },
                    React.createElement(ResultComponent, { result: result, index: i, active: isActive })
                );
            })
        );
    },
    render: function render() {
        var _this = this;

        var _state5 = this.state;
        var value = _state5.value;
        var focused = _state5.focused;
        var loading = _state5.loading;
        var results = _state5.results;


        return React.createElement(
            'div',
            { className: 'Autocomplete' },
            React.createElement(Input, {
                value: value,
                placeholder: this.props.placeholder,
                size: this.props.size,
                onChange: this.onInputChanged,
                onFocus: function onFocus(e) {
                    return _this.onFocusChanged(true);
                },
                onBlur: function onBlur(e) {
                    return _this.onFocusChanged(false);
                },
                onKeyDown: this.onKeyDown
            }),
            loading ? React.createElement(Spinner, { size: 'sm', centered: false }) : '',
            focused && results.length > 0 ? this.renderResults() : ''
        );
    }
});

var AutocompleteResult = React.createClass({
    displayName: 'AutocompleteResult',
    render: function render() {
        var _props = this.props;
        var active = _props.active;
        var children = _props.children;
        var onClick = _props.onClick;

        return React.createElement(
            'div',
            { className: classNames('AutocompleteResult', { active: active }),
                onMouseDown: onClick },
            children
        );
    }
});

module.exports = Autocomplete;
//# sourceMappingURL=data:application/json;base64,