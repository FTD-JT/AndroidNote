'use strict';

var React = require('react');
var classNames = require('classnames');

var SIZES = require('./SIZES');

var Textarea = React.createClass({
    displayName: 'Textarea',


    /**
     * Focus this input
     */
    focus: function focus() {
        this.refs.textarea.focus();
    },
    getDefaultProps: function getDefaultProps() {
        return {
            size: SIZES[0],
            rows: 3
        };
    },
    onChange: function onChange(e) {
        if (this.props.onChange) {
            this.props.onChange(e);
        }
    },
    render: function render() {
        var _props = this.props;
        var disabled = _props.disabled;
        var name = _props.name;
        var placeholder = _props.placeholder;
        var size = _props.size;
        var rows = _props.rows;
        var autoFocus = _props.autoFocus;
        var value = _props.value;
        var defaultValue = _props.defaultValue;
        var maxLength = _props.maxLength;


        var className = classNames('form-control', 'input-' + size, this.props.className);

        return React.createElement('textarea', { ref: 'textarea',
            className: className, rows: rows, maxLength: maxLength,
            autoFocus: autoFocus, disabled: disabled,
            name: name, value: value, defaultValue: defaultValue,
            placeholder: placeholder, onChange: this.onChange });
    }
});

module.exports = Textarea;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXh0YXJlYS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQU0sUUFBUSxRQUFRLE9BQVIsQ0FBZDtBQUNBLElBQU0sYUFBYSxRQUFRLFlBQVIsQ0FBbkI7O0FBRUEsSUFBTSxRQUFRLFFBQVEsU0FBUixDQUFkOztBQUVBLElBQU0sV0FBVyxNQUFNLFdBQU4sQ0FBa0I7QUFBQTs7O0FBa0IvQjs7O0FBR0EsU0FyQitCLG1CQXFCdkI7QUFDSixhQUFLLElBQUwsQ0FBVSxRQUFWLENBQW1CLEtBQW5CO0FBQ0gsS0F2QjhCO0FBeUIvQixtQkF6QitCLDZCQXlCYjtBQUNkLGVBQU87QUFDSCxrQkFBTSxNQUFNLENBQU4sQ0FESDtBQUVILGtCQUFNO0FBRkgsU0FBUDtBQUlILEtBOUI4QjtBQWdDL0IsWUFoQytCLG9CQWdDdEIsQ0FoQ3NCLEVBZ0NuQjtBQUNSLFlBQUksS0FBSyxLQUFMLENBQVcsUUFBZixFQUF5QjtBQUNyQixpQkFBSyxLQUFMLENBQVcsUUFBWCxDQUFvQixDQUFwQjtBQUNIO0FBQ0osS0FwQzhCO0FBc0MvQixVQXRDK0Isb0JBc0N0QjtBQUFBLHFCQUlELEtBQUssS0FKSjtBQUFBLFlBRUQsUUFGQyxVQUVELFFBRkM7QUFBQSxZQUVTLElBRlQsVUFFUyxJQUZUO0FBQUEsWUFFZSxXQUZmLFVBRWUsV0FGZjtBQUFBLFlBRTRCLElBRjVCLFVBRTRCLElBRjVCO0FBQUEsWUFFa0MsSUFGbEMsVUFFa0MsSUFGbEM7QUFBQSxZQUdELFNBSEMsVUFHRCxTQUhDO0FBQUEsWUFHVSxLQUhWLFVBR1UsS0FIVjtBQUFBLFlBR2lCLFlBSGpCLFVBR2lCLFlBSGpCO0FBQUEsWUFHK0IsU0FIL0IsVUFHK0IsU0FIL0I7OztBQU9MLFlBQU0sWUFBWSxXQUFXLGNBQVgsRUFBMkIsV0FBVyxJQUF0QyxFQUE0QyxLQUFLLEtBQUwsQ0FBVyxTQUF2RCxDQUFsQjs7QUFFQSxlQUFPLGtDQUFVLEtBQUksVUFBZDtBQUNILHVCQUFXLFNBRFIsRUFDbUIsTUFBTSxJQUR6QixFQUMrQixXQUFXLFNBRDFDO0FBRUgsdUJBQVcsU0FGUixFQUVtQixVQUFVLFFBRjdCO0FBR0gsa0JBQU0sSUFISCxFQUdTLE9BQU8sS0FIaEIsRUFHdUIsY0FBYyxZQUhyQztBQUlILHlCQUFhLFdBSlYsRUFJdUIsVUFBVSxLQUFLLFFBSnRDLEdBQVA7QUFLSDtBQXBEOEIsQ0FBbEIsQ0FBakI7O0FBdURBLE9BQU8sT0FBUCxHQUFpQixRQUFqQiIsImZpbGUiOiJUZXh0YXJlYS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IGNsYXNzTmFtZXMgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbmNvbnN0IFNJWkVTID0gcmVxdWlyZSgnLi9TSVpFUycpO1xuXG5jb25zdCBUZXh0YXJlYSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICBwcm9wVHlwZXM6IHtcbiAgICAgICAgb25DaGFuZ2U6ICAgICBSZWFjdC5Qcm9wVHlwZXMuZnVuYyxcbiAgICAgICAgbmFtZTogICAgICAgICBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBjbGFzc05hbWU6ICAgIFJlYWN0LlByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiAgUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGlzYWJsZWQ6ICAgICBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgYXV0b0ZvY3VzOiAgICBSZWFjdC5Qcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgc2l6ZTogICAgICAgICBSZWFjdC5Qcm9wVHlwZXMub25lT2YoU0laRVMpLFxuICAgICAgICByb3dzOiAgICAgICAgIFJlYWN0LlByb3BUeXBlcy5udW1iZXIsXG4gICAgICAgIG1heExlbmd0aDogICAgUmVhY3QuUHJvcFR5cGVzLm51bWJlcixcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICB2YWx1ZTogICAgICAgIFJlYWN0LlByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgICAgICAgUmVhY3QuUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgICAgIFJlYWN0LlByb3BUeXBlcy5ib29sXG4gICAgICAgIF0pXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZvY3VzIHRoaXMgaW5wdXRcbiAgICAgKi9cbiAgICBmb2N1cygpIHtcbiAgICAgICAgdGhpcy5yZWZzLnRleHRhcmVhLmZvY3VzKCk7XG4gICAgfSxcblxuICAgIGdldERlZmF1bHRQcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNpemU6IFNJWkVTWzBdLFxuICAgICAgICAgICAgcm93czogM1xuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBvbkNoYW5nZShlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKGUpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZGlzYWJsZWQsIG5hbWUsIHBsYWNlaG9sZGVyLCBzaXplLCByb3dzLFxuICAgICAgICAgICAgYXV0b0ZvY3VzLCB2YWx1ZSwgZGVmYXVsdFZhbHVlLCBtYXhMZW5ndGhcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG5cblxuICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBjbGFzc05hbWVzKCdmb3JtLWNvbnRyb2wnLCAnaW5wdXQtJyArIHNpemUsIHRoaXMucHJvcHMuY2xhc3NOYW1lKTtcblxuICAgICAgICByZXR1cm4gPHRleHRhcmVhIHJlZj1cInRleHRhcmVhXCJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSByb3dzPXtyb3dzfSBtYXhMZW5ndGg9e21heExlbmd0aH1cbiAgICAgICAgICAgIGF1dG9Gb2N1cz17YXV0b0ZvY3VzfSBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgICAgICBuYW1lPXtuYW1lfSB2YWx1ZT17dmFsdWV9IGRlZmF1bHRWYWx1ZT17ZGVmYXVsdFZhbHVlfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3BsYWNlaG9sZGVyfSBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZX0+PC90ZXh0YXJlYT47XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dGFyZWE7XG4iXX0=