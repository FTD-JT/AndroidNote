'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var React = require('react');
var classNames = require('classnames');

var Button = require('./Button');
var Icon = require('./Icon');
var Backdrop = require('./Backdrop');

/**
 * Dropdown (or up). Automatically bound to child Button.
 * See ButtonDropdown implementation to wrap something else than a button.
 *
 *  <Dropdown>
 *
 *      <Button ... />
 *
 *      <Dropdown.Item header>Category 1</Dropdown.Item>
 *      <Dropdown.Item href={...}> ... </Dropdown.Item>
 *      <Dropdown.Item href={...}> ... </Dropdown.Item>
 *
 *      <Dropdown.Item divider />
 *      <Dropdown.Item header>Category 2</Dropdown.Item>
 *      <Dropdown.Item href={...}> ... </Dropdown.Item>
 *      <Dropdown.Item href={...}> ... </Dropdown.Item>
 *
 *  </Dropdown>
 */

var ButtonDropdown = React.createClass({
    displayName: 'ButtonDropdown',
    getInitialState: function getInitialState() {
        return {
            open: false
        };
    },


    /**
     * Toggle the dopdown
     * @param  {Event} e?
     */
    toggle: function toggle(e) {
        if (e) {
            e.stopPropagation();
        }

        this.setState({
            open: !this.state.open
        });
    },


    /**
     * Close the dropdown
     */
    close: function close() {
        this.setState({
            open: false
        });
    },
    render: function render() {
        var that = this;
        var inner = [];
        var items = [];

        var _props = this.props;
        var className = _props.className;
        var children = _props.children;
        var up = _props.up;
        var width = _props.width;

        var otherProps = _objectWithoutProperties(_props, ['className', 'children', 'up', 'width']);

        var open = this.state.open;


        className = classNames('dropdown', className, {
            'dropup': up
        });

        inner = React.Children.map(children, function (child) {
            // If the Button is connected through Redux.connect, it is
            // renamed to "Connect(Button...)"
            if (child && child.type && child.type.displayName.indexOf('Button') !== -1) {
                if (!child.props.onClick && !child.props.href) {
                    return React.cloneElement(child, {
                        onNativeClick: that.toggle,
                        dropdownToggle: true
                    });
                }
                return child;
            }

            return null;
        });

        items = React.Children.map(children, function (child) {
            if (child && child.type && child.type.displayName == 'DropdownItem') {
                return React.cloneElement(child, {
                    onClick: function onClick() {
                        if (child.props.onClick) {
                            child.props.onClick();
                        }
                        that.close();
                    }
                });
            }
            return null;
        });

        var content = React.createElement(
            Button.Group,
            _extends({}, otherProps, { className: className }),
            inner
        );

        // Wrap in a backdrop when open
        if (open) {
            return React.createElement(
                Backdrop,
                { wrapper: content, onClose: this.close },
                open ? React.createElement(
                    DropdownMenu,
                    { width: width },
                    items
                ) : null
            );
        } else {
            return content;
        }
    }
});

var DropdownItem = React.createClass({
    displayName: 'DropdownItem',
    onClick: function onClick(e) {
        if (!this.props.href) {
            e.preventDefault();
            e.stopPropagation();

            if (this.props.onClick) this.props.onClick();
        }
    },
    isInner: function isInner(child) {
        return !child || !child.type || child.type.displayName !== 'DropdownMenu';
    },
    render: function render() {
        var _props2 = this.props;
        var divider = _props2.divider;
        var header = _props2.header;
        var checked = _props2.checked;


        if (divider) {
            return React.createElement('li', { className: 'divider' });
        }
        if (header) {
            return React.createElement(
                'li',
                { className: 'dropdown-header' },
                this.props.children
            );
        }

        var inner = [],
            outer = [];

        inner = React.Children.map(this.props.children, function (child) {
            if (this.isInner(child)) return child;
            return null;
        }, this);

        outer = React.Children.map(this.props.children, function (child) {
            if (!this.isInner(child)) return child;
            return null;
        }, this);

        return React.createElement(
            'li',
            { className: this.props.disabled ? 'disabled' : '' },
            React.createElement(
                'a',
                _extends({}, this.props, { href: this.props.href || '#', onClick: this.props.disabled ? null : this.onClick }),
                checked ? React.createElement(
                    'div',
                    { className: 'dropdown-icon pull-left' },
                    React.createElement(Icon, { id: 'check' })
                ) : '',
                inner
            ),
            outer
        );
    }
});

var DropdownMenu = React.createClass({
    displayName: 'DropdownMenu',
    getDefaultProps: function getDefaultProps() {
        return {
            open: true,
            width: null
        };
    },
    render: function render() {
        var width = this.props.width;

        var className = classNames('dropdown-menu', width ? 'dropdown-' + width : '', {
            open: this.props.open
        });

        return React.createElement(
            'ul',
            { className: className },
            this.props.children
        );
    }
});

var ItemHeader = React.createClass({
    displayName: 'ItemHeader',
    render: function render() {
        return React.createElement(
            'div',
            { className: 'dropdown-itemheader' },
            this.props.children
        );
    }
});

var ItemDesc = React.createClass({
    displayName: 'ItemDesc',
    render: function render() {
        return React.createElement(
            'div',
            { className: 'dropdown-itemdesc' },
            this.props.children
        );
    }
});

module.exports = ButtonDropdown;
module.exports.Item = DropdownItem;
module.exports.Item.Header = ItemHeader;
module.exports.Item.Desc = ItemDesc;
module.exports.Menu = DropdownMenu;
//# sourceMappingURL=data:application/json;base64,